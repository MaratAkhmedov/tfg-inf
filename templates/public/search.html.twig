{% extends "base_with_navbar.html.twig" %}


{% block stylesheets %}
	{{ parent() }}
	<style>
		#propertyFilters {
			border: 1px solid rgb(0, 0, 0, 0.175);
			border-radius: 0.25rem;
			padding: 0.5rem;
			background: #FCFAFA
		}

		.property-filter-row {
			padding-top: 0.5rem;
			/* border: 1px solid #eb6864;
			border-radius: 5px; 
			margin: 0.25rem; */
			/* margin-top: 0.5rem;
			border-top: 1px solid #c3c3c3; */
		}
		.filter-counter {
			transform: translate(50%, -50%);
			font-size: 0.75rem;
			background-color: #eb6864;
			/*background-color: #f5beb7;*/
			padding-left: 0.07rem;
			border: 1px solid white;
			width: 1.25rem;
			height: 1.25rem;
			border-radius: 15px;
			display: none;
		}

		.dropdown-menu-scrollable {
			max-height: 25rem; /* Altura máxima del dropdown */
			overflow-y: auto; /* Añadir scroll vertical si se supera la altura máxima */
		}

		.dropdown-menu-fixed-button {
			position: sticky;
			bottom: 0;
		}

		.card-link {
			text-decoration: none;
			color: inherit;
		}
		.card:hover,
		.card.hover {
			text-decoration: none;
			box-shadow: 0 0 1rem rgb(235, 104, 100, 0.7);
			-webkit-transition: box-shadow ease-in-out 0.15s;
			transition: box-shadow ease-in-out 0.15s;
		}


		#map {
			position: fixed !important;
			top: 11vh;
			height: 89vh;
			width: 48%;
		}

		#navigation-bar {
			padding-top: 58px;
			width: 50%;
			padding-left: 0.5rem;
			padding-right: 1.5rem;
			background-color: white;
			margin-left: 0.70rem;
			z-index: 1000; /* Asegura que esté por encima de otros elementos */
			border-radius: 0.25rem;

		}

		@media(max-width: 991.98px) {
			#navigation-bar {
				margin-left: 0;
				margin-right: 0;
				padding-right: 1rem;
				padding-left: 1rem;
				width: 100%;
				padding-top: 70px;
				z-index: 1000; /* Asegura que esté por encima de otros elementos */
			}
		}

		#property-cards {
			padding-top: 85px !important;
			position: sticky;
		}

		.gm-style iframe + div {
			border: none !important;
		}

		@media(min-width: 991.98px) {
			footer {
				width: 51%;
			}
		}
	</style>

{% endblock %}

{% block title %}
	{{ 'search.title'|trans }}
{% endblock %}

{% block content %}
	<div class="container-fluid">

		{% set breadcrumbs = [
            {'label': 'breadcrumbs.home', 'link': 'default'},
            {'label': 'property.form.properties', 'link': ''}
        ] %}


		<div class="row">
			<div class="col-lg-6 aside">
				<div id="navigation-bar" class="fixed-top">
					<div class="d-flex bd-highlight gap-3">
						<div class="me-auto bd-highlight">
							{% include '/breadcrumbs.html.twig' with {'breadcrumbs': breadcrumbs} %}
						</div>

						<div class="bd-highlight">
							<button class="btn btn-primary position-relative my-3 btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" data-bs-target="#propertyFiltersDropdown" aria-expanded="false" data-bs-auto-close="outside">
								{{ 'search.form.filters'|trans }}
								<span class="filter-counter position-absolute top-0 start-100 translate-middle" id="numFilters"></span>
							</button>
							<div id="propertyFilters" class="dropdown-menu-end dropdown-menu dropdown-menu-scrollable">
								{{ form_start(searchForm) }}
								{{ form_row(searchForm.type, { 'row_attr': {'class': 'property-filter-row'}}) }}

								<div class="property-filter-row">
									<div class="price-label">
										{{ 'search.form.price'|trans }}
									</div>
									<div class="d-flex">
										<div class="p-2 w-50">
											{{ form_widget(searchForm.priceMin) }}
											{{ form_errors(searchForm.priceMin) }}
										</div>
										<div class="p-2 w-50">
											{{ form_widget(searchForm.priceMax) }}
											{{ form_errors(searchForm.priceMax) }}
										</div>
									</div>
								</div>

								<div class="property-filter-row">
									<div class="square-label">
										{{ 'search.form.square'|trans }}
									</div>
									<div class="d-flex">
										<div class="p-2 w-50">
											{{ form_widget(searchForm.squareMin) }}
											{{ form_errors(searchForm.squareMin) }}
										</div>
										<div class="p-2 w-50">
											{{ form_widget(searchForm.squareMax) }}
											{{ form_errors(searchForm.squareMax) }}
										</div>
									</div>
								</div>

								{{ form_row(searchForm.rooms, { 'row_attr': {'class': 'property-filter-row'}}) }}
								{{ form_row(searchForm.bathrooms, { 'row_attr': {'class': 'property-filter-row'}}) }}
								{{ form_row(searchForm.states, { 'row_attr': {'class': 'property-filter-row'}}) }}
								{{ form_row(searchForm.rules, { 'row_attr': {'class': 'property-filter-row'}}) }}
								<div class="dropdown-menu-fixed-button">
									{{ form_widget(searchForm.search, { 'attr': {'class': 'btn btn-primary w-100'} }) }}
								</div>
								{{ form_end(searchForm) }}

							</div>
						</div>

						<div style="width:30px;height: 190%; margin-top:10px;" class="bd-highlight pt-2 d-lg-none">
							<a style="" class="" href="#" role="button" data-bs-toggle="modal" data-bs-target="#mapModal">
								<span style="">{{ ux_icon('uiw:map') }}</span>
							</a>
						</div>
					</div>
				</div>
				<div id="property-cards" class="">
					{% for property in pagination.items %}
						{% set now = "now"|date('U') %}
						{% set updatedAtTimestamp = property.updatedAt|date('U') %}
						{% set minutesPassed = (now - updatedAtTimestamp) // 60 %}
						{% set firstPhoto = property.photos|default([])|first %}

						<div class="card mb-3" property-id="{{ property.id }}">
							<div class="row g-0">
								<div class="col-lg-4 object-fit-cover">
									<img style="width:100%; height:100%;" src="{{ firstPhoto is not empty ? (asset(firstPhoto.url) ) : asset('images/placeholder400x200.png') }}" class="object-fit-cover img-fluid rounded-start" alt="...">
								</div>
								<div class="col-lg-8">
									<div class="card-body">
										<div class="d-flex justify-content-between">
											<h5 class="card-title">{{ property.name }}</h5>
											<h5 class="card-title price">{{property.price|format_currency('EUR', {rounding_mode: 'floor'})}}</h5>
										</div>
										<p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
										<div class="d-flex justify-content-between">
											<div class="">
												<p class="card-text">
													<small class="text-body-secondary">{{ 'property.form.last_updated'|trans({'%minutes%': minutesPassed}) }}</small>
												</p>
											</div>
											<a href="{{ path('app_property_show', {'id': property.id}) }}" class="stretched-link"></a>
											{% set isFavorite = false %}

											{% if is_granted('IS_AUTHENTICATED_FULLY') %}
												{% set isFavorite = property.favorites | filter(favorite => favorite.property.id == property.id and favorite.user.id == app.user.getId()) | length > 0 %}
											{% endif %}
											<div class="" style="width:30px; height: 30px;z-index:3;position:relative;">
												<a class="favorite-link" role="button">
													{{ ux_icon('mdi:heart-outline', {class: 'not-confirmed-favourite-icon', style: (isFavorite ? 'display: none;' : '')}) }}
													{{ ux_icon('mdi:heart', {class: 'confirmed-favourite-icon', style: (isFavorite ? '' : 'display: none;')}) }}
													<div style="display: none;" class="spinner spinner-grow text-primary" role="status">
														<span class="visually-hidden">Loading...</span>
													</div>
												</a>
											</div>
										</div>

									</div>
								</div>
							</div>
						</div>
					{% endfor %}
					<div id="property-not-found-message" class="p-2" style="display: none">
						{{'property.not_found'|trans}}
					</div>
				</div>


				<div class="d-flex justify-content-center">
					{{ knp_pagination_render(pagination) }}
				</div>
			</div>


			<div class="col-lg-6 d-none d-lg-block">
				<div id="map"></div>
			</div>

			<!-- Modal para dispositivos pequeños -->
			<div class="modal fade" id="mapModal" tabindex="-1" aria-labelledby="mapModalLabel" aria-hidden="true">
				<div class="modal-dialog modal-fullscreen">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title" id="mapModalLabel">{{ 'search.form.map'|trans }}</h5>
							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body">
							<div id="map-modal-container"></div>
						</div>
					</div>
				</div>
			</div>

		</div>


	</div>
</div>{% endblock %}{% block javascript %}<!-- parse-ignore-start -->
<script src="https://maps.googleapis.com/maps/api/js?key={{app.request.server.get('GOOGLE_MAP_API_KEY')}}"></script>
<script src="{{ asset('js/map_styles.js') }}"></script>

<script>
    $(document).ready(function() {
		// add favourite icon click
		$('.favorite-link').on('click', function () {
            var propertyId = $(this).closest('[property-id]').attr('property-id');
			var notConfirmedFavoriteIcon = $(this).find('.not-confirmed-favourite-icon')
			var confirmedFavoriteIcon = $(this).find('.confirmed-favourite-icon')
			var spinner = $(this).find('.spinner')
			
			if(notConfirmedFavoriteIcon.is(':visible')) {
				addToFavorite(propertyId, spinner, confirmedFavoriteIcon, notConfirmedFavoriteIcon);
			}else if(confirmedFavoriteIcon.is(':visible')){
				removeFromFavorite(propertyId, spinner, confirmedFavoriteIcon, notConfirmedFavoriteIcon)
			}
        });

		function addToFavorite(propertyId, spinner, confirmedFavoriteIcon, notConfirmedFavoriteIcon) {
			spinner.show()
			notConfirmedFavoriteIcon.hide()
			$.ajax({
                url: Routing.generate('app_add_favorite', { property: propertyId}),
                type: 'PUT',
                success: function (response) {
					spinner.hide();
					confirmedFavoriteIcon.show()
                },
                error: function (xhr, status, error) {
                    console.error(error);
					spinner.hide();
					notConfirmedFavoriteIcon.show()
					if (xhr.status === 401) {
						var response = JSON.parse(xhr.responseText);
						if (response.redirect) {
							window.location.href = response.redirect;
						}
					}else{
						alert('Error al agregar a favoritos.');
					}
                }
            });
		}

		function removeFromFavorite(propertyId, spinner, confirmedFavoriteIcon, notConfirmedFavoriteIcon) {
			var currentRoute = "{{app.request.get('_route')}}"
			spinner.show()
			confirmedFavoriteIcon.hide()
			$.ajax({
                url: Routing.generate('app_remove_favorite', { property: propertyId}),
                type: 'DELETE',
                success: function (response) {
					spinner.hide();
					if(currentRoute == 'app_search_favorite') {	// remove card from app
						$('#property-cards [property-id="'+ propertyId +'"]').remove();
						initMap()
					}else{
						notConfirmedFavoriteIcon.show()
					}
                },
                error: function (xhr, status, error) {
                    console.error(error);
					spinner.hide();
					confirmedFavoriteIcon.show()
                    if (xhr.status === 401) {
						var response = JSON.parse(xhr.responseText);
						if (response.redirect) {
							window.location.href = response.redirect;
						}
					}else{
						alert('Error al quitar de favoritos.');
					}
                }
            });
		}


		// Automatic updates of price selections 
    	const priceOptions = Object.fromEntries(Array.from({ length: 8 }, (_, i) => [200 * (i + 1), 200 * (i + 1) + " €"]));
        function updatePriceMax() {
            const minPrice = parseInt($('.price-min-selector').val());
            const priceMaxSelector = $('.price-max-selector');
			const selectedMaxPrice = parseInt(priceMaxSelector.val());
            priceMaxSelector.empty();
            priceMaxSelector.append('<option value="">max</option>');
            $.each(priceOptions, function(price, value) {
                if (isNaN(minPrice) || parseInt(price) >= minPrice) {
                    priceMaxSelector.append(new Option(value, price));
                }
            });
			if(selectedMaxPrice >= minPrice) {
				priceMaxSelector.val(selectedMaxPrice);
			}
        }

        function updatePriceMin() {
            const maxPrice = parseInt($('.price-max-selector').val());
            const priceMinSelector = $('.price-min-selector');
			const selectedMinPrice = parseInt(priceMinSelector.val());
            priceMinSelector.empty();
            priceMinSelector.append('<option value="">min</option>');
            $.each(priceOptions, function(price, value) {
                if (isNaN(maxPrice) || parseInt(price) <= maxPrice) {
                    priceMinSelector.append(new Option(value, price));
                }
            });
			if(selectedMinPrice <= maxPrice) {
				priceMinSelector.val(selectedMinPrice);
			}
        }

        $('.price-min-selector').change(function() {
            updatePriceMax();
        });
        $('.price-max-selector').change(function() {
            updatePriceMin();
        });

		
		// Automatic updates of square selections 
    	const squareOptions = Object.fromEntries(Array.from({ length: 20 }, (_, i) => [20 * (i + 1), 20 * (i + 1) + " m²"]));
        function updateSquareMax() {
            const minSquare = parseInt($('.square-min-selector').val());
            const squareMaxSelector = $('.square-max-selector');
			const selectedMaxSquare = parseInt(squareMaxSelector.val());
            squareMaxSelector.empty();
            squareMaxSelector.append('<option value="">max</option>');
            $.each(squareOptions, function(square, value) {
                if (isNaN(minSquare) || parseInt(square) >= minSquare) {
                    squareMaxSelector.append(new Option(value, square));
                }
            });
			if(selectedMaxSquare >= minSquare) {
				squareMaxSelector.val(selectedMaxSquare);
			}
        }

        function updateSquareMin() {
            const maxSquare = parseInt($('.square-max-selector').val());
            const squareMinSelector = $('.square-min-selector');
			const selectedMinSquare = parseInt(squareMinSelector.val());
            squareMinSelector.empty();
            squareMinSelector.append('<option value="">min</option>');
            $.each(squareOptions, function(square, value) {
                if (isNaN(maxSquare) || parseInt(square) <= maxSquare) {
                    squareMinSelector.append(new Option(value, square));
                }
            });
			if(selectedMinSquare <= maxSquare) {
				squareMinSelector.val(selectedMinSquare);
			}
        }

        $('.square-min-selector').change(function() {
            updateSquareMax();
        });
        $('.square-max-selector').change(function() {
            updateSquareMin();
        });
    });

	const filters = {}

	filters.priceMinFilter = "{{searchForm.priceMin.vars.value}}"
	filters.priceMaxFilter = "{{searchForm.priceMax.vars.value}}"
	filters.squareMinFilter = "{{searchForm.squareMin.vars.value}}"
	filters.squareMaxFilter = "{{searchForm.squareMax.vars.value}}"
	filters.roomsFilter = {{ searchForm.rooms.vars.value|json_encode()|raw }}
	filters.bathroomsFilter = {{searchForm.bathrooms.vars.value|json_encode()|raw }}
	filters.statesFilter = {{searchForm.states.vars.value|json_encode()|raw }}
	filters.rulesFilter = {{searchForm.rules.vars.value|json_encode()|raw }}

	const numFilters = Object.entries(filters).filter(entry => {
		const [key, value] = entry;
		if (Array.isArray(value) && value.length > 0) {
			return true;
		}else if (!Array.isArray(value) && value) {
			return true;
		}
		return false;
	});

	if(numFilters.length > 0) {
		$('#numFilters').html(numFilters.length);
		$('#numFilters').show();
	}else{
		$('#numFilters').hide();
	}
            
	// Inicializar el mapa
	var map;
    var markersData = {{ coordinates|json_encode()|raw }};
    var markers = [];

	function refreshMarkers() {
		markersData = markersData.filter(marker => $('#property-cards [property-id="'+ marker.id +'"]').length > 0);
	}

	function checkNoMarkers() {
		if(markersData.length > 0) {
			$('#property-not-found-message').hide();
		}else{
			$('#property-not-found-message').show();
		}
	}

    function initMap() {
		refreshMarkers();
		checkNoMarkers();
		var bounds = new google.maps.LatLngBounds();
        map = new google.maps.Map(document.getElementById('map'), {
			center: { lat: 39.46975, lng: -0.37739 },
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            styles: mapStyles,
			zoomControl: false, // Deshabilitar botones de zoom
			streetViewControl: false, // Deshabilitar Street View
			mapTypeControl: false,      // Deshabilitar el control de tipo de mapa
			fullscreenControl: false,   // Deshabilitar el control de pantalla completa
			gestureHandling: 'greedy' // Permitir el desplazamiento y zoom sin la tecla CTRL
        });

		function icon(marker, isHighlighted) {
			const price = $('#property-cards [property-id="'+ marker.id +'"]').find('.price').text();
			return ({
            	url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
					<svg xmlns="http://www.w3.org/2000/svg" width="${isHighlighted ? 70 : 60}" height="${isHighlighted ? 30 : 28}" style="margin-bottom:2px;">
					    <style>
							.property-marker-map {
								background-color: #eb6864; 
								color:white; 
								border-radius: 15px; 
								border: 1px solid black;  
								font-size: 12px; 
								text-align: center;
								align-content: center;
								margin: 5px;
							}
							.property-marker-map-highlighted {
								background-color: #eb6864; 
								color:white; 
								border-radius: 15px; 
								border: 1px solid black;  
								font-size: 12px; 
								text-align: center;
								text-align: center;
								align-content: center;
								width: 90%;
								height: 90%;
							}
						</style>
						<foreignObject x="0" y="0" width="100%" height="100%" style="margin: 2px;">
						<div xmlns="http://www.w3.org/1999/xhtml" class="${isHighlighted ? 'property-marker-map-highlighted' : 'property-marker-map' }">
							${price}
						</div>
						</foreignObject>
					</svg>
            	`),
			})
		}

		function smallIcon() {
			return ({
            	url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
					<svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" style="">
					    <style>
							.property-marker-map {
								background-color: #eb6864; 
								border-radius: 15px; 
								border: 1px solid black;  
								width: 90%;
								height: 90%;
							}
						</style>
						<foreignObject x="0" y="0" width="100%" height="100%" style="margin: 2px;">
						<div xmlns="http://www.w3.org/1999/xhtml" class="property-marker-map"></div>
						</foreignObject>
					</svg>
            	`),
			})
		}

		if(markersData.length == 0) {
			var position = new google.maps.LatLng(39.46975, -0.37739);
			bounds.extend(position);
		} 

        markersData.forEach(function(marker) {
            var position = new google.maps.LatLng(marker.lat, marker.lng);
            bounds.extend(position);

            const propertyMarker = new google.maps.Marker({
                position: position,
                map: map,
				icon: icon(marker, false)
            });

			propertyMarker.propertyId = marker.id;


			propertyMarker.addListener('mouseover', (e) => {
				const propertyIdCard = $('#property-cards [property-id="'+ marker.id +'"]');
				if(!e.dontChangeReverseSide && (propertyIdCard.length > 0)) {
					propertyIdCard.addClass("hover");
					propertyIdCard[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
				}

				markers.forEach(m => {
					if (m.propertyId != propertyMarker.propertyId) {
						m.setIcon(smallIcon());
						m.setZIndex(0);
					}else{
						m.setVisible(true);
						m.setIcon(icon(marker, true))
						m.setZIndex(google.maps.Marker.MAX_ZINDEX + 1);
					}
				})
			})


			propertyMarker.addListener('click', (e) => {
				const href = Routing.generate('app_property_show', {id: propertyMarker.propertyId})
				window.location.href = href;
			})

						const href = Routing.generate('app_property_show', {id: marker.id})


			propertyMarker.addListener('mouseout', (e) => {
				if(!e.dontChangeReverseSide) {
					$('#property-cards [property-id="'+ marker.id +'"]').removeClass("hover");
				}
				markers.forEach(m => {
					m.setVisible(true);
					m.setIcon(icon(marker, false))
				})
          	});

			markers.push(propertyMarker)
        });

        map.fitBounds(bounds);

		// Ajustamos el zoom máximo para evitar un zoom demasiado cercano
        var listener = google.maps.event.addListener(map, "idle", function() { 
            if (map.getZoom() > 12) {
                map.setZoom(12);
            }
            google.maps.event.removeListener(listener);
        });
    }

	// Escucha el evento cuando el modal se muestra
	$('#mapModal').on('shown.bs.modal', function () {
		$("#map-modal-container").append($("#map").children("div"));
		google.maps.event.trigger(map, 'resize');
    });

	// Escucha el evento cuando el modal se oculta
    $('#mapModal').on('hidden.bs.modal', function () {
			$("#map").empty().append($("#map-modal-container").children("div"))
      		google.maps.event.trigger(map, 'resize');
    });

	window.onload = function() {
        initMap();
    };


	// card hover
	$('.card').hover(function() {
        var propertyId = $(this).attr('property-id');
		const markerData = markersData.find(m => m.id == propertyId);
		const marker = markers.find(m => m.propertyId == markerData.id);
        google.maps.event.trigger(marker, 'mouseover', {dontChangeReverseSide: true});
    },
    function() {
       var propertyId = $(this).attr('property-id');
		const markerData = markersData.find(m => m.id == propertyId);
		const marker = markers.find(m => m.propertyId == markerData.id);
        google.maps.event.trigger(marker, 'mouseout', {dontChangeReverseSide: true});
    });
</script>

{% endblock %}
