{% extends 'base.html.twig' %}


{% block stylesheets %}
	<style>
		#propertyFilters {
			border: 1px solid rgb(0, 0, 0, 0.175);
			border-radius: 0.25rem;
			padding: 0.5rem;
			background: #FCFAFA
		}

		.property-filter-row {
			padding-top: 0.5rem;
			/* border: 1px solid #eb6864;
			border-radius: 5px; 
			margin: 0.25rem; */
			/* margin-top: 0.5rem;
			border-top: 1px solid #c3c3c3; */
		}
		.filter-counter {
			transform: translate(50%, -50%);
			font-size: 0.75rem;
			background-color: #eb6864;
			/*background-color: #f5beb7;*/
			padding-left: 0.07rem;
			border: 1px solid white;
			width: 1.25rem;
			height: 1.25rem;
			border-radius: 15px;
			display: none;
		}

		.dropdown-menu-scrollable {
            max-height: 25rem; /* Altura máxima del dropdown */
            overflow-y: auto; /* Añadir scroll vertical si se supera la altura máxima */
        }

		.dropdown-menu-fixed-button {
            position: sticky;
            bottom: 0;
        }
	</style>

{% endblock %}

{% block title %}
	{{ 'search.title'|trans }}
{% endblock %}

{% block body %}
	<div class="container">

		{% set breadcrumbs = [
            {'label': 'breadcrumbs.home', 'link': 'default'},
            {'label': 'property.form.properties', 'link': ''}
        ] %}

		<h2>{{ 'search.title'|trans }}</h2>
		<div class="">
			<div class="d-flex bd-highlight mb-3 gap-3">
				<div class="me-auto bd-highlight">
					{% include '/breadcrumbs.html.twig' with {'breadcrumbs': breadcrumbs} %}
				</div>

				<div class="bd-highlight">
					<button class="btn btn-primary position-relative my-3 btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" data-bs-target="#propertyFiltersDropdown" aria-expanded="false" data-bs-auto-close="outside">
						{{ 'search.form.filters'|trans }}
						<span class="filter-counter position-absolute top-0 start-100 translate-middle" id="numFilters"></span>
					</button>
					<div id="propertyFilters" class="dropdown-menu-end dropdown-menu dropdown-menu-scrollable">
						{{ form_start(searchForm) }}
						{{ form_row(searchForm.type, { 'row_attr': {'class': 'property-filter-row'}}) }}

						<div class="property-filter-row">
							<div class="price-label">
								{{ 'search.form.price'|trans }}
							</div>
							<div class="d-flex">
								<div class="p-2 w-50">
									{{ form_widget(searchForm.priceMin) }}
									{{ form_errors(searchForm.priceMin) }}
								</div>
								<div class="p-2 w-50">
									{{ form_widget(searchForm.priceMax) }}
									{{ form_errors(searchForm.priceMax) }}
								</div>
							</div>
						</div>

						<div class="property-filter-row">
							<div class="square-label">
								{{ 'search.form.square'|trans }}
							</div>
							<div class="d-flex">
								<div class="p-2 w-50">
									{{ form_widget(searchForm.squareMin) }}
									{{ form_errors(searchForm.squareMin) }}
								</div>
								<div class="p-2 w-50">
									{{ form_widget(searchForm.squareMax) }}
									{{ form_errors(searchForm.squareMax) }}
								</div>
							</div>
						</div>

						{{ form_row(searchForm.rooms, { 'row_attr': {'class': 'property-filter-row'}}) }}
						{{ form_row(searchForm.bathrooms, { 'row_attr': {'class': 'property-filter-row'}}) }}
						{{ form_row(searchForm.states, { 'row_attr': {'class': 'property-filter-row'}}) }}
						{{ form_row(searchForm.rules, { 'row_attr': {'class': 'property-filter-row'}}) }}
						<div class="dropdown-menu-fixed-button">
							{{ form_widget(searchForm.search, { 'attr': {'class': 'btn btn-primary w-100'} }) }}
						</div>
						{{ form_end(searchForm) }}

					</div>
				</div>

				<div style="width:30px;height: 190%; margin-top:10px;" class="bd-highlight pt-2">
					<a style="" class="" href="#" role="button">
						<span style="">{{ ux_icon('uiw:map') }}</span>
					</a>
				</div>
			</div>
		</div>

		<div class="row">


			<div class="col-lg-6">
				{% for property in pagination.items %}
					{% set now = "now"|date('U') %}
					{% set updatedAtTimestamp = property.updatedAt|date('U') %}
					{% set minutesPassed = (now - updatedAtTimestamp) // 60 %}
					{% set firstPhoto = property.photos|default([])|first %}

					<div class="">
						<div class="card mb-3" style="">
							<div class="row g-0">
								<div style="height: 230px;" class="col-lg-4 object-fit-cover">
									<img style="width:100%; height:100%;" src="{{ firstPhoto is not empty ? (asset(firstPhoto.url) ) : asset('images/placeholder400x200.png') }}" class="object-fit-cover img-fluid rounded-start" alt="...">
								</div>
								<div class="col-lg-8">
									<div class="card-body">
										<h5 class="card-title">{{ property.name }}</h5>
										<p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
										<p class="card-text">
											<small class="text-body-secondary">{{ 'property.form.last_updated'|trans({'%minutes%': minutesPassed}) }}</small>
										</p>
										<a href="{{ path('app_property_show', {'id': property.id}) }}" class="btn btn-primary">Ver el anuncio</a>
									</div>
								</div>
							</div>
						</div>
					</div>
				{% else %}
					<tr>
						<td colspan="12">{{'property.not_found'|trans}}</td>
					</tr>
				{% endfor %}
			</div>

		</div>


		<div class="d-flex justify-content-center">
			{{ knp_pagination_render(pagination) }}
		</div>
	</div>
</div>{% endblock %}{% block javascript %}<!-- parse-ignore-start -->
<script>
    $(document).ready(function() {
		// Automatic updates of price selections 
    	const priceOptions = Object.fromEntries(Array.from({ length: 8 }, (_, i) => [200 * (i + 1), 200 * (i + 1) + " €"]));
        function updatePriceMax() {
            const minPrice = parseInt($('.price-min-selector').val());
            const priceMaxSelector = $('.price-max-selector');
			const selectedMaxPrice = parseInt(priceMaxSelector.val());
            priceMaxSelector.empty();
            priceMaxSelector.append('<option value="">max</option>');
            $.each(priceOptions, function(price, value) {
                if (isNaN(minPrice) || parseInt(price) >= minPrice) {
                    priceMaxSelector.append(new Option(value, price));
                }
            });
			if(selectedMaxPrice >= minPrice) {
				priceMaxSelector.val(selectedMaxPrice);
			}
        }

        function updatePriceMin() {
            const maxPrice = parseInt($('.price-max-selector').val());
            const priceMinSelector = $('.price-min-selector');
			const selectedMinPrice = parseInt(priceMinSelector.val());
            priceMinSelector.empty();
            priceMinSelector.append('<option value="">min</option>');
            $.each(priceOptions, function(price, value) {
                if (isNaN(maxPrice) || parseInt(price) <= maxPrice) {
                    priceMinSelector.append(new Option(value, price));
                }
            });
			if(selectedMinPrice <= maxPrice) {
				priceMinSelector.val(selectedMinPrice);
			}
        }

        $('.price-min-selector').change(function() {
            updatePriceMax();
        });
        $('.price-max-selector').change(function() {
            updatePriceMin();
        });

		
		// Automatic updates of square selections 
    	const squareOptions = Object.fromEntries(Array.from({ length: 20 }, (_, i) => [20 * (i + 1), 20 * (i + 1) + " m²"]));
        function updateSquareMax() {
            const minSquare = parseInt($('.square-min-selector').val());
            const squareMaxSelector = $('.square-max-selector');
			const selectedMaxSquare = parseInt(squareMaxSelector.val());
            squareMaxSelector.empty();
            squareMaxSelector.append('<option value="">max</option>');
            $.each(squareOptions, function(square, value) {
                if (isNaN(minSquare) || parseInt(square) >= minSquare) {
                    squareMaxSelector.append(new Option(value, square));
                }
            });
			if(selectedMaxSquare >= minSquare) {
				squareMaxSelector.val(selectedMaxSquare);
			}
        }

        function updateSquareMin() {
            const maxSquare = parseInt($('.square-max-selector').val());
            const squareMinSelector = $('.square-min-selector');
			const selectedMinSquare = parseInt(squareMinSelector.val());
            squareMinSelector.empty();
            squareMinSelector.append('<option value="">min</option>');
            $.each(squareOptions, function(square, value) {
                if (isNaN(maxSquare) || parseInt(square) <= maxSquare) {
                    squareMinSelector.append(new Option(value, square));
                }
            });
			if(selectedMinSquare <= maxSquare) {
				squareMinSelector.val(selectedMinSquare);
			}
        }

        $('.square-min-selector').change(function() {
            updateSquareMax();
        });
        $('.square-max-selector').change(function() {
            updateSquareMin();
        });
    });

	const filters = {}

	filters.priceMinFilter = "{{searchForm.priceMin.vars.value}}"
	filters.priceMaxFilter = "{{searchForm.priceMax.vars.value}}"
	filters.squareMinFilter = "{{searchForm.squareMin.vars.value}}"
	filters.squareMaxFilter = "{{searchForm.squareMax.vars.value}}"
	filters.roomsFilter = {{ searchForm.rooms.vars.value|json_encode()|raw }}
	filters.bathroomsFilter = {{searchForm.bathrooms.vars.value|json_encode()|raw }}
	filters.statesFilter = {{searchForm.states.vars.value|json_encode()|raw }}
	filters.rulesFilter = {{searchForm.rules.vars.value|json_encode()|raw }}

	const numFilters = Object.entries(filters).filter(entry => {
		const [key, value] = entry;
		if (Array.isArray(value) && value.length > 0) {
			return true;
		}else if (!Array.isArray(value) && value) {
			return true;
		}
		return false;
	});

	if(numFilters.length > 0) {
		$('#numFilters').html(numFilters.length);
		$('#numFilters').show();
	}else{
		$('#numFilters').hide();
	}
</script>

{% endblock %}
