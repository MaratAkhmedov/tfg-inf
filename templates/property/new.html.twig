{% extends 'base.html.twig' %}

{% block stylesheets %}
	<style>
        label.required:after {
            content: " *";
            color: red;
        }	
        #map {
            height: 500px;
            width: 100%;
        }
    </style>

{% endblock %}

{% block body %}

    <div class="container">

        {% set breadcrumbs = {
            'breadcrumbs.home': 'default',
            'property.form.properties': 'app_property_index',
            'breadcrumbs.create': 'app_property_new',
        } %}
        {% include '/breadcrumbs.html.twig' with {'breadcrumbs': breadcrumbs} %}


        <h2>{{ 'property.form.create'|trans }}</h2>
        
        {{ form_start(form) }}
            {#  #}
            <div class="row">
                <div class="mb-3">
                    {{ form_label(form.name) }}
                    {{ form_widget(form.name, {'attr': {'class': 'form-control'}}) }}
                    {{ form_errors(form.name) }}
                </div>
            </div>


            <div class="row">
                <div class="mb-3">
                    {{ form_label(form.description) }}
                    {{ form_widget(form.description, {'attr': {'class': 'form-control'}}) }}
                    {{ form_errors(form.description) }}
                </div>
            </div>
            

            <div class="row">
                <div class="col-md-12">
                    <div class="mb-3">
                        {{ form_label(form.address) }}
                        {{ form_widget(form.address, {'attr': {'class': 'form-control'}}) }}
                        {{ form_errors(form.address) }}
                    </div>
                </div>
                

                    <div class="col-md-12 mx-auto">
                        <div class="mx-auto" style="height: 300px; text-align:center " id="map">
                        </div>
                    </div>
            </div>

            <div class="row">
                <div class="mb-3 col-md-6">
                {{ form_label(form.price) }}
                {{ form_widget(form.price, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.price) }}
                </div>

                <div class="mb-3 col-md-6">
                    {{ form_label(form.numBathrooms) }}
                    {{ form_widget(form.numBathrooms, {'attr': {'class': 'form-control'}}) }}
                    {{ form_errors(form.numBathrooms) }}
                </div>

                <div class="mb-3 col-md-6">
                    {{ form_label(form.numRooms) }}
                    {{ form_widget(form.numRooms, {'attr': {'class': 'form-control'}}) }}
                    {{ form_errors(form.numRooms) }}
                </div>

                <div class="mb-3 col-md-6">
                    {{ form_label(form.maxPersons) }}
                    {{ form_widget(form.maxPersons, {'attr': {'class': 'form-control'}}) }}
                    {{ form_errors(form.maxPersons) }}
                </div>

                <div class="mb-3 col-md-6">
                    {{ form_label(form.floor) }}
                    {{ form_widget(form.floor, {'attr': {'class': 'form-control'}}) }}
                    {{ form_errors(form.floor) }}

                    {{ form_label(form.lastPlant) }}
                    {{ form_widget(form.lastPlant, {'attr': {'class': 'form-control'}}) }}
                    {{ form_errors(form.lastPlant) }}
                </div>

                <div class="mb-3 col-md-6">
                    {{ form_label(form.square) }}
                    {{ form_widget(form.square, {'attr': {'class': 'form-control'}}) }}
                    {{ form_errors(form.square) }}
                </div>

                <div class="mb-3 col-md-6">
                    {{ form_label(form.type) }}
                    {{ form_widget(form.type, {'attr': {'class': 'form-control'}}) }}
                    {{ form_errors(form.type) }}
                </div>


                <div class="mb-3 col-md-6">
                    {{ form_label(form.state) }}
                    {{ form_widget(form.state, {'attr': {'class': 'form-control'}}) }}
                    {{ form_errors(form.state) }}
                </div>

                <div class="mb-3 col-md-6">
                    {{ form_label(form.equipments) }}
                    {{ form_widget(form.equipments, {'attr': {'class': ''}}) }}
                    {{ form_errors(form.equipments) }}
                </div>

                <div class="mb-3 col-md-6">
                    {{ form_label(form.rules) }}
                    {{ form_widget(form.rules, {'attr': {'class': ''}}) }}
                    {{ form_errors(form.rules) }}
                </div>
            </div>

            {{ form_widget(form) }}

            <button class="btn btn-success">{{ 'form.save'|trans }}</button>
        {{ form_end(form) }}

        {# {{ include('property/_form.html.twig') }} #}
    </div>

{% endblock %}


{% block javascript %}
    <script src="https://maps.googleapis.com/maps/api/js?key={{app.request.server.get('GOOGLE_MAPS_API_KEY')}}&libraries=places"></script>

    <script>
        let map;
        let autocomplete;
        let marker;

        function initMap() {
            // Inicializar el mapa
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 39.46975, lng: -0.37739 },
                zoom: 8
            });

            // Inicializar el marcador (sin posición al inicio)
            marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            // Inicializar el autocompletado
            const input = document.getElementById('property_address');
            autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            autocomplete.addListener('place_changed', function() {
                const place = autocomplete.getPlace();

                // Clear out the old markers.
                marker.setMap(null);


                // get the icon, name and location.
                const bounds = new google.maps.LatLngBounds();

                if (!place.geometry || !place.geometry.location) {
                    console.log("Returned place contains no geometry");
                    return;
                }

                const icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25),
                };
                // Create a marker for each place.
                marker =  new google.maps.Marker({
                    map,
                    icon,
                    title: place.name,
                    position: place.geometry.location,
                });
                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
                map.fitBounds(bounds);
            });
        }

        // Inicializar el mapa al cargar la página
        window.onload = function() {
            initMap();
        };
    </script>
{% endblock %}
