{% extends 'base.html.twig' %}

{% block stylesheets %}
	<style>
        label.required:after {
            content: " *";
            color: red;
        }	
        #map {
            height: 500px;
            width: 100%;
        }
    </style>

{% endblock %}

{% block body %}

    <div class="container">

        {% set breadcrumbs = {
            'breadcrumbs.home': 'default',
            'property.form.properties': 'app_property_index',
            'breadcrumbs.create': 'app_property_new',
        } %}
        {% include '/breadcrumbs.html.twig' with {'breadcrumbs': breadcrumbs} %}


        <h2>{{ 'property.form.create'|trans }}</h2>
        
        
        {{ include('property/_form.html.twig') }}
    </div>

{% endblock %}


{% block javascript %}
    <script src="https://maps.googleapis.com/maps/api/js?key={{app.request.server.get('GOOGLE_MAP_API_KEY')}}&libraries=places"></script>

    <script>
        let map;
        let autocomplete;
        let marker;

        function initMap() {
            // Inicializar el mapa
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 39.46975, lng: -0.37739 },
                zoom: 8
            });

            // Inicializar el marcador (sin posición al inicio)
            marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            // Inicializar el autocompletado
            const input = document.getElementById('property_address');
            const options = {
                types: ['address'], // Solo sugerir direcciones completas
                componentRestrictions: { country: 'ES' } // Opcional: Restringir por país
            };
            autocomplete = new google.maps.places.Autocomplete(input, options);
            autocomplete.bindTo('bounds', map);

            autocomplete.addListener('place_changed', function() {
                const place = autocomplete.getPlace();

                // Clear out the old markers.
                marker.setMap(null);


                // get the icon, name and location.
                const bounds = new google.maps.LatLngBounds();

                if (!place.geometry || !place.geometry.location) {
                    console.log("Returned place contains no geometry");
                    return;
                }

                // Establecer los valores de coordenadas
                //document.getElementById('property_coordinates').value = place.geometry.location.lat() + "," + place.geometry.location.lng();
                document.getElementById('property_mapPlaceId').value = place.place_id;

                const icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25),
                };
                // Create a marker for each place.
                marker =  new google.maps.Marker({
                    map,
                    icon,
                    title: place.name,
                    position: place.geometry.location,
                });
                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
                map.fitBounds(bounds);
            });
        }

        // Inicializar el mapa al cargar la página
        window.onload = function() {
            initMap();

            // Validate address before submit
            document.getElementById('property_address').addEventListener('blur', function () {
                if(document.getElementById('property_mapPlaceId').value == "") {
                    document.getElementById('property_address').value = '';
                }
            });
        };
    </script>
{% endblock %}
